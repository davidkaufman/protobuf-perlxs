2009-01-20 version 0.6:

  * Issue 3: Off-by-one error in XS generated code for initializing 
	     repeated elements in ->new() (Patch contributed by
	     Jason Hord).

  * Separated generated POD documentation from .pm files into .pod
    files.

  * Eliminated the need to generate (and use) typemap files.

  * Performance enhancement: pack() uses a ZeroCopyStream to avoid
    an extra string copy.  The performance of packing large messages
    is roughly twice as good as it was before.

  * Added an example that packs and unpacks a large message.  Found
    that the performance of populating, packing, and unpacking a 
    message with 10 strings of 2 MB each was:

    Implementation           pack      unpack    pack + unpack
    --------------------------------------------------------------
    Storable freeze/thaw     0.052991  0.032896  0.085887
    protoxs/NoZeroCopy       0.067012  0.023046  0.090058
    protoxs/ZeroCopy         0.042966  0.020175  0.063141

    All three methods are quite fast, but protoxs/ZeroCopy wins by a
    significant margin, with an overall pack + unpack throughput of
    ~316 MB/s, compared with 232 MB/s for Storable and ~222 MB/s for
    protoxs/NoZeroCopy.

2009-01-14 version 0.5:

  * Bugfix: generated code had numerous issues.  Patch contributed
    by Seth Daniel.

  * New example illustrating use of protobuf types.

2009-01-09 version 0.4:

  * New method in generated classes:

      my @fields = $message->fields();

    @fields is an array of strings.  Each string corresponds to the
    name of a class member.  Contributed by Seth Daniel.

  * New method in generated classes:

      my $hashref = $message->to_hashref();

    $hashref is a complete, Data::Dumper-style recursive dump of the
    message and all of its embedded messages.

  * Extended methods copy_from() and merge_from():

    In addition to their pre-existing ability to copy and merge a
    message instance from another instance of the same message type,
    these methods may also be used with a hashref argument, of the
    sort that might be generated by the to_hashref() method.  This
    makes it easy to build messages from hashrefs:

      my $message = Foo->new;
      $message->copy_from({ bar => 'baz', bat => 'qux' });

    Note that for both of these methods, failure to provide a
    hash value for any of the required fields of a message is
    silently ignored, for the following reasons:

    1) In some cases, the user may wish to build the message one
       part at a time via merge_from() of multiple different 
       hashrefs, ultimately yielding a complete message instance.

    2) In any case, missing required fields will be reported when
       the user unsuccessfully attempts to serialize the message.

  * Extended message constructors

    It is now possible to instantiate a message with a hashref as
    the sole constructor argument:

      my $message = Foo->new({ bar => 'baz', bat => 'qux' });

    This is equivalent to:

      my $message = Foo->new;
      $message->copy_from({ bar => 'baz', bat => 'qux' });

    It is also possible to instantiate a message with a scalar as
    the sole constructor argument:

      my $packed = Foo->new({ bar => 'baz'})->pack;
      my $foo2 = Foo->new($packed);

    In this case, the scalar is interpreted as a packed message
    of the given type.

2008-11-19 version 0.3:

  * Issue 1: undef symbols in OS/X (need to link with libprotobuf).
  * Issue 2: Embedded message code generated with Perl class name.
	
2008-10-01 version 0.2:

  * Removed CamelCase of class and enum names.

2008-09-19 version 0.1:

  * Initial version.
	
